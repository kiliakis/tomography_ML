# Example of condition and variable definition =)
if !defined FNAME
    FNAME = LHC_tomo
endif

# ID for each simulations
# filename correspond to the yaml config (see last line)
# Cluster is one number for all the batch
# Process is an id (0...N) for each simulation
ID      = $(Cluster).$(Process)

# This is the executable launched on the node when
# the simulation start like you would do ./run.sh
# in a terminal. The easiest way to launch your
# python script with your version of python is
# to put everything in a bash script and source
# your own .bashrc
executable = main.sh


# There is no queue in HTCondor, only the walltime
# has to be specified but you can use the JobFlavour
# to define a standard walltime
#+JobFlavour = ''

#espresso     = 20 minutes
#microcentury = 1 hour
#longlunch    = 2 hours
#workday      = 8 hours
#tomorrow     = 1 day
#testmatch    = 3 days
#nextweek     = 1 week

# To define a specific time:
+MaxRuntime = 300
# By default this the time corresponding to the
# espresso JobFlavour. The maximum is 1 week, or 604800 seconds.
# Note that now the time is real, no more
# fucking normalized time where you have
# no idea how long your job will run (!).

# By default, no .out, .err .log.
# The path for these files must be
# specified (relative path OK)
output  = ./logs/$(FNAME).$(ID).out
error   = ./logs/$(FNAME).$(ID).err
log     = ./logs/$(FNAME).$(Cluster).log

# This flag will send the environnement
# of the terminal you send the jobs.
getenv        = True

# To receive emails
# Never, Complete, Error or Always
# notify_user   = username@cern.ch
# notification  = Never


universe                = vanilla
should_transfer_files   = YES
#when_to_transfer_output = ON_EXIT


# By default, a job will get one slot of a CPU core, 2gb of memory and 20gb of disk space.
# It is possible to ask for more CPUs or more memory, but the system will scale the number
# of CPUs you receive to respect the 2gb / core limit.
# To ask for more CPUs:
RequestCpus = 2
request_memory = 7.9 GB


# argument to pass to the executable
arguments            = $(filename)

# queue send the job specified above to the scheduler.
# the rest of the line says: match the variable filename
# to all the .yaml file in the folder simulation_input
queue filename matching files ./input/*.yaml

